


import java.util.Random;


import java.util.Scanner;



public class lesson_4_XO_Game {
    static final int SIZE = 5;
    public static int block = 4;

    static final char DOT_X = 'X';
    static  final char DOT_O = 'O';
    static  final  char DOT_EMPTY = '.';

    static char [][] map;

    static Scanner sc = new Scanner(System.in);
    static Random  random = new Random();

    public static void main(String[] args){
        initMap();
        printMap();
        while (true) {
            humanTurn();
            printMap();
            if (checkWin(DOT_X)) {
                System.out.println("Вы победили");
                break;
            }
                if (isFull()) {
                    System.out.println("Ничья");
                    break;
                }


                aiTurn();
                printMap();
            if (checkWin(DOT_O)) {
                System.out.println("Победил AI");
                break;
            }
            if (isFull()) {
                System.out.println("Ничья");
                break;
            }
            }
        }






    public static void initMap(){
        map = new char [SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE ; j++) {
                map[i][j] = DOT_EMPTY;

            }
        }
    }
    public static void printMap(){
        System.out.print("  ");
        for (int i = 1; i <= SIZE; i++) {
            System.out.print(i+" ");
        }
        System.out.println();
        for (int i = 0; i < SIZE ; i++) {
            System.out.print(i + 1 + " ");
            for (int j = 0; j < SIZE ; j++) {
                System.out.print(map[i][j]+" ");

            }
            System.out.println();
        }
    }
        public static void humanTurn (){
        int x,y;
        do {
            System.out.println("input coord X Y");
            x = sc.nextInt()-1;
            y = sc.nextInt()-1;
        } while (!isCellValid(x,y));
        map [y][x]= DOT_X;
        }
        public static boolean isCellValid (int x, int y){
        if (x<0 || y<0 || x >=SIZE || y >=SIZE){
            return false;
        }
        return map [y][x] == DOT_EMPTY;
//        if (map[y][x] == DOT_EMPTY){
//            return true;
//        } else {return false;}

        }
    public static void aiTurn() {
        int x,y;
        do {
            x = random.nextInt(SIZE);
            y = random.nextInt(SIZE);
        }while (!isCellValid(x,y));
        map[y][x] = DOT_O;
    }
    public static boolean isFull(){
        int k = 0;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == DOT_EMPTY) {
                    k++;
                }

            }
            
        }
        return k == 0;
    }
    public static boolean checkWin(char symbol){
        for (int col=0; col<SIZE-block+1; col++) {
            for (int row=0; row<SIZE-block+1; row++) {
                if (checkDiagonal(symbol, col, row) || checkLanes(symbol, col, row)) return true;
            }
        }
        return false;
    }
   private static boolean checkDiagonal(char symb, int x, int y) {
        boolean toright, toleft;
        toright = true;
        toleft = true;
        for (int i=0; i<block; i++) {
            toright &= (map[i+x][i+y] == symb);
            toleft &= (map[block-i-1+x][i+y] == symb);
        }

        if (toright || toleft) return true;

        return false;
    }


   private static boolean checkLanes(char symb, int x, int y) {
        boolean cols, rows;
        for (int col=x; col<block+x; col++) {
            cols = true;
            rows = true;
            for (int row=y; row<block+y; row++) {
                cols &= (map[col][row] == symb);
                rows &= (map[row][col] == symb);
            }

            if (cols || rows) return true;
        }

        return false;
    }

}






    public static void initMap(){
        map = new char [SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE ; j++) {
                map[i][j] = DOT_EMPTY;

            }
        }
    }
    public static void printMap(){
        System.out.print("  ");
        for (int i = 1; i <= SIZE; i++) {
            System.out.print(i+" ");
        }
        System.out.println();
        for (int i = 0; i < SIZE ; i++) {
            System.out.print(i + 1 + " ");
            for (int j = 0; j < SIZE ; j++) {
                System.out.print(map[i][j]+" ");

            }
            System.out.println();
        }
    }
        public static void humanTurn (){
        int x,y;
        do {
            System.out.println("input coord X Y");
            x = sc.nextInt()-1;
            y = sc.nextInt()-1;
        } while (!isCellValid(y,x));
        map [y][x]= DOT_X;
        }
        public static boolean isCellValid (int x, int y){
        if (x<0 || y<0 || x >=SIZE || y >=SIZE){
            return false;
        }
        return map [y][x] == DOT_EMPTY;
//        if (map[y][x] == DOT_EMPTY){
//            return true;
//        } else {return false;}

        }
    public static void aiTurn() {
        int x,y;
        do {
            x = random.nextInt(SIZE);
            y = random.nextInt(SIZE);
        }while (!isCellValid(x,y));
        map[y][x] = DOT_O;
    }
    public static boolean isFull(){
        int k = 0;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == DOT_EMPTY) {
                    k++;
                }

            }
            
        }
        return k == 0;
    }
    public static boolean checkWin(char symbol){
        boolean toright, toleft;
        toright = true;
        toleft = true;
        for (int i=0; i<SIZE; i++) {
            toright &= (map[i][i] == symbol);
            toleft &= (map[SIZE-i-1][i] == symbol);
        }

        if (toright || toleft) return true;

        return false;

    }
}
